package curso.test;

import java.util.List;

import org.apache.commons.dbcp.BasicDataSource;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;


import curso.dao.UsuarioDao;
import curso.dao.impl1.UsuarioDaoStatic;
import curso.dao.impl2.UsuarioDaoOtraImpl;
import curso.dao.impl3.UsuarioDaoJDBCMysql;
import curso.modelo.Usuario;

import junit.framework.TestCase;

public class TestUsuarioDao extends TestCase {
	public final static Log log=LogFactory.getLog(TestUsuarioDao.class);
	ApplicationContext ctx;
	Usuario usuario;
	UsuarioDao dao;

	
	
	protected void setUp() throws Exception { 
		log.debug("preparando el test");
		ctx=new ClassPathXmlApplicationContext("applicationContext.HCurso.xml");
		dao=(UsuarioDao) ctx.getBean("miDao");
		
//		UsuarioDaoJDBCMysql dao=new UsuarioDaoJDBCMysql();
//		BasicDataSource ds=new BasicDataSource();
//		ds.setDriverClassName("com.mysql.jdbc.Driver");
//		ds.setUrl("jdbc:mysql:///test");
//		ds.setUsername("root");
//		ds.setPassword("root");
//		dao.setDs(ds);
//		this.dao=dao;
	}

	protected void tearDown() throws Exception {
		usuario=null;
		dao=null;
		log.debug("fin del test");
	}

	public void testUsuarioDao() {
		// Solo para verificar que hay conexi�n y no salta excepci�n 
		usuario = new Usuario ();
		usuario.setId(new Integer (1)); 
		usuario.setNombre("Nombre usuario"); 
		dao.saveUsuario(usuario); 
		usuario = dao.findUsuario(new Integer(1));
		//encontramos el mismo usuario que grabamos
		assertTrue(usuario != null);
		
		Usuario usuario2 = dao.findUsuario(new Integer (1)); 
		log.info("Recuperado usuario"+usuario2); 
		assertTrue(usuario2 != null); 
		log.info ("Comparamos : "+usuario2 + " con : "+usuario);
		assertTrue (usuario2.equals(usuario));
		// recuperamos el mismo usuario
		dao.deleteUsuario(new Integer(1)); 
		usuario2 = dao.findUsuario(new Integer(1)); 
		assertNull("El usuario no debe de existir",usuario2);
	}
	
	/** 
	 *  Realiza el test de inserci�n de datos malos que provoquen un efecto 
	 *  de rollback en las transacciones. 
	 *  @throws Exception excepci�n generada. 
	 */ 
	   	public void testTransaccion () throws Exception {
			log.debug("Iniciamos guardar todos los usuarios:"); 
			Usuario[] usuarios = this.ListadoUsuarios ();
			log.debug (usuarios);
			try { 
				dao.saveListaUsuarios(usuarios);
			} catch (Exception e) { 
				log.error (e);
				List listado = dao.listAll();
				log.debug ("La lista debe de estar vacia");
				assertTrue(listado.isEmpty()); 
			}
	}
		/** 
		 *  @return Un listado de usuarios con algunos datos malos 
		 */ 
		private Usuario[] ListadoUsuarios() {
			Usuario usu1 = new Usuario ();
			usu1.setId(new Integer(100)); 
			usu1.setNombre("Nombre uno"); 
			Usuario usu2 = new Usuario (); 
			usu2.setId(new Integer (101)); 
			usu2.setNombre("Nombre dos"); 
			// Es es un usuario no valido 
			Usuario usu3 = new Usuario (); 
			usu3.setId(null); 
			usu3.setNombre("Usuario no valido");
			Usuario usu4 = new Usuario (); 
			usu4.setId(new Integer (103)); 
			usu4.setNombre("Nombre cuatro");
			Usuario[] usuarios = {usu1,usu2,usu3,usu4}; 
			return usuarios;
		}

}
